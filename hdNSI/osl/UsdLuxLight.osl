surface UsdLuxLight(
	/*
		Many parameters get baked into color at export time. This is why we
		don't have intensity, exposure, etc. Should reconsider this if we want
		this shader to be used in a network.
	*/
	color color_ = color(1),
	int normalize_ = 0,
	float diffuse_ = 1,
	float specular = 1,
	string texturefile = "" [[int texturefile = 1]],
	string textureformat = "")
{
	Ci = 0;

	/* Make it single sided. */
	if (backfacing())
	{
		Ci = transparent();
		return;
	}

	/* So the light does not cast any shadows. */
	if (!raytype("camera"))
	{
		Ci += transparent();
	}

	color result = color_;

	if (normalize_)
	{
		result /= surfacearea();
	}

	if (raytype("diffuse"))
	{
		result *= diffuse_;
	}
	if (raytype("specular"))
	{
		result *= specular;
	}

	if (texturefile != "" && textureformat != "")
	{
		/* only support lat/long so far */
		vector In = normalize(I);
		float vx = In[0];
		float vy = In[1];
		float vz = In[2];
		/* s is in [-0.25, 0.75] but texture() periodic wrap handles that. */
		float s = atan2(vz, vx) / (2.0 * M_PI) + 0.25;
		float t = atan2(vy, sqrt(vx*vx + vz*vz)) / M_PI + 0.5;

		result *= texture(texturefile, s, t, "swrap", "periodic", "twrap", "clamp");
	}

	Ci += result * emission();
}
